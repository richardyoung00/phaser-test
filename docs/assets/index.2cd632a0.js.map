{"version":3,"file":"index.2cd632a0.js","sources":["../../vite/dynamic-import-polyfill","../../src/scenes/Preloader.js","../../public/textures/sokoban_tilesheet.png","../../public/textures/characters.png","../../public/textures/concrete.jpg","../../public/textures/bullet_1.png","../../public/textures/tanks/sheet_tanks.png","../../public/textures/tanks/sheet_tanks.xml?url","../../public/textures/tilesheet_map.png","../../src/modules/ProjectileWeapon.js","../../src/game_data/maps/base.js","../../src/game_data/maps/index.js","../../src/game_data/weapons/blaster.js","../../src/game_data/weapons/index.js","../../src/game_objects/ProjectileSprite.js","../../src/scenes/Game.js","../../src/game_data/players/index.js","../../src/main.js","../../src/multiplayer/connection.js","../../src/gameState.js"],"sourcesContent":["const p = function polyfill(modulePath = '.', importFunctionName = '__import__') {\n    try {\n        self[importFunctionName] = new Function('u', `return import(u)`);\n    }\n    catch (error) {\n        const baseURL = new URL(modulePath, location);\n        const cleanup = (script) => {\n            URL.revokeObjectURL(script.src);\n            script.remove();\n        };\n        self[importFunctionName] = (url) => new Promise((resolve, reject) => {\n            const absURL = new URL(url, baseURL);\n            // If the module has already been imported, resolve immediately.\n            if (self[importFunctionName].moduleMap[absURL]) {\n                return resolve(self[importFunctionName].moduleMap[absURL]);\n            }\n            const moduleBlob = new Blob([\n                `import * as m from '${absURL}';`,\n                `${importFunctionName}.moduleMap['${absURL}']=m;`\n            ], { type: 'text/javascript' });\n            const script = Object.assign(document.createElement('script'), {\n                type: 'module',\n                src: URL.createObjectURL(moduleBlob),\n                onerror() {\n                    reject(new Error(`Failed to import: ${url}`));\n                    cleanup(script);\n                },\n                onload() {\n                    resolve(self[importFunctionName].moduleMap[absURL]);\n                    cleanup(script);\n                }\n            });\n            document.head.appendChild(script);\n        });\n        self[importFunctionName].moduleMap = {};\n    }\n};__VITE_IS_MODERN__&&p(\"/phaser-test/assets/\");","import Phaser from 'phaser'\n\nimport sokoban_tilesheet from '../../public/textures/sokoban_tilesheet.png'\nimport character from '../../public/textures/characters.png'\nimport concrete from '../../public/textures/concrete.jpg'\nimport bullet_1 from '../../public/textures/bullet_1.png'\n\nimport tanksSheet from '../../public/textures/tanks/sheet_tanks.png'\nimport tanksAtlas from '../../public/textures/tanks/sheet_tanks.xml?url'\n\nimport mapTilesheet from '../../public/textures/tilesheet_map.png'\n\nexport default class Preloader extends Phaser.Scene {\n    constructor() {\n        super('preloader')\n    }\n\n    preload() {\n        this.load.spritesheet('sokoban', sokoban_tilesheet, {\n            frameWidth: 64\n        })\n        this.load.image('character', character);\n        this.load.image('concrete', concrete);\n        this.load.image('bullet_1', bullet_1);\n\n        this.load.atlasXML('tanks', tanksSheet, tanksAtlas)\n        this.load.spritesheet('map', mapTilesheet,{frameWidth: 64})\n    }\n\n    create() {\n        this.scene.start('game')\n    }\n}","export default \"__VITE_ASSET__a7f7b83c__\"","export default \"__VITE_ASSET__abe55e0a__\"","export default \"__VITE_ASSET__b037b885__\"","export default \"__VITE_ASSET__9a497132__\"","export default \"__VITE_ASSET__545bac47__\"","export default \"__VITE_ASSET__23e8bf82__\"","export default \"__VITE_ASSET__a3075eac__\"","import Phaser from 'phaser'\n\nclass ProjectileWeaponBullet extends Phaser.Physics.Arcade.Sprite {\n    constructor(scene, x, y) {\n        super(scene, x, y, 'bullet_1');\n        this.worldBounds = scene.physics.world.bounds\n\n    }\n\n    fire(x, y, direction, weaponData) {\n        this.body.reset(x, y);\n        this.body.setCollideWorldBounds(false);\n\n        this.setActive(true);\n        this.setVisible(true);\n\n        this.scene.physics.velocityFromRotation(direction, weaponData.projectile_speed, this.body.velocity);\n\n    }\n\n    preUpdate(time, delta) {\n        super.preUpdate(time, delta);\n\n        if (!this.worldBounds.contains(this.x, this.y)) {\n            this.setActive(false);\n            this.setVisible(false);\n        }\n    }\n\n}\n\nexport default class ProjectileWeapon extends Phaser.Physics.Arcade.Group {\n    constructor(scene, weaponData) {\n        super(scene.physics.world, scene);\n        this.weaponData = weaponData\n\n        this.createMultiple({\n            frameQuantity: this.weaponData.max_projectiles,\n            key: this.weaponData.texture,\n            active: false,\n            visible: false,\n            bounceX: 1,\n            bounceY: 1,\n            classType: ProjectileWeaponBullet\n        });\n    }\n\n    fireBullet(x, y, direction) {\n        if (Date.now() - this.lastFire < this.weaponData.fire_delay) {\n            return\n        }\n\n        let bullet = this.getFirstDead(false);\n\n        if (bullet) {\n            bullet.fire(x, y, direction, this.weaponData);\n            this.lastFire = Date.now()\n        }\n        return bullet\n    }\n\n}","export const base = {\n    id: \"base\",\n    name: \"Base Map\",\n    height: 1000,\n    width: 1000,\n    tileTexture: \"map\",\n    tileTextureFrame: 0,\n    objects: [\n        {\n            texture: \"map\",\n            textureFrame: 357,\n            x: 0,\n            y: 0,\n            playerCollision: true,\n            bulletCollision: true\n        }\n    ]\n}","import { base } from './base'\n\nexport const maps = [\n    base\n]\n\nexport function getMapData(mapId) {\n    return maps.find(m => m.id === mapId)\n}","export const blaster = {\n    id: \"blaster\",\n    name: \"Blaster\",\n    texture: \"tanks\",\n    textureFrame: \"bulletSilver\",\n    scale: 0.4,\n    tint: 0x000000,\n    max_projectiles: 10,\n    fire_delay: 600,\n    max_bounces: 1,\n    projectile_speed: 600\n}","import { blaster } from './blaster'\n\nexport const weapons = [\n    blaster\n]\n\nexport function getWeaponData(weaponId) {\n    return weapons.find(m => m.id === weaponId)\n}","export default class ProjectileSprite extends Phaser.Physics.Arcade.Sprite {\n\n    constructor(config) {\n        super(config.scene, config.x, config.y, config.texture, config.textureFrame);\n\n        config.group.add(this)\n\n        // config.scene.sys.displayList.add(this)\n        // config.scene.sys.updateList.add(this)\n        // config.scene.sys.arcadePhysics.world.enableBody(this, 0)\n        \n\n        config.scene.add.existing(this);\n        config.scene.physics.add.existing(this);\n\n        this.config = config\n        this.setScale(config.scale)\n        this.setRotation(config.rotation)\n        this.setTint(config.tint)\n\n        this.setVelocity(config.velocityX, config.velocityY)\n        this.setBounce(1, 1)\n\n        this.numCollisions = 0\n    }\n\n    didCollideWithObject(object) {\n        this.numCollisions++\n        if (this.numCollisions > this.config.maxBounces) {\n            this.destroy()\n        } else {\n            console.log(\"change velocity\")\n            this.emit(\"invert-velocity-y\")\n        }\n\n    }\n\n}","import Phaser from 'phaser'\nimport ProjectileWeapon from \"../modules/ProjectileWeapon\";\nimport {getMapData} from \"../game_data/maps\";\nimport {getWeaponData} from \"../game_data/weapons\";\nimport ProjectileSprite from '../game_objects/ProjectileSprite';\n\nexport default class Game extends Phaser.Scene {\n\n    /** @type {Phaser.Types.Input.Keyboard.CursorKeys} */\n    cursors\n\n    /** @type {Phaser.Physics.Arcade.Sprite} */\n    player\n\n    constructor() {\n        super('game')\n        this.player = null\n        this.players = {}\n\n        this.projectiles = {}\n        \n\n    }\n\n    init() {\n\n        this.cursors = this.input.keyboard.addKeys({\n            up: Phaser.Input.Keyboard.KeyCodes.UP,\n            down: Phaser.Input.Keyboard.KeyCodes.DOWN,\n            left: Phaser.Input.Keyboard.KeyCodes.LEFT,\n            right: Phaser.Input.Keyboard.KeyCodes.RIGHT,\n            space: Phaser.Input.Keyboard.KeyCodes.SPACE,\n            shift: Phaser.Input.Keyboard.KeyCodes.SHIFT,\n            up_alt: Phaser.Input.Keyboard.KeyCodes.W,\n            down_alt: Phaser.Input.Keyboard.KeyCodes.S,\n            left_alt: Phaser.Input.Keyboard.KeyCodes.A,\n            right_alt: Phaser.Input.Keyboard.KeyCodes.D\n        });\n        this.connection = this.registry.get('connection')\n        this.gameState = this.registry.get('gameState')\n        this.mapData = getMapData(this.gameState.getMapName())\n\n\n        window.game = this\n    }\n\n    create() {\n\n        // Collision groups\n        this.playersGroup = this.physics.add.group()\n        this.projectilesGroup = this.physics.add.group()\n        this.objectPlayerCollideGroup = this.add.group()\n        this.objectProjectileCollideGroup = this.physics.add.staticGroup()\n\n        const {width, height} = this.scale\n\n        // Set aspect ratio to the same as viewport (may break on portrait or weird sized screens)\n        // const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\n        // const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)\n        // this.scale.displaySize.setAspectRatio( vw/vh );\n        // this.scale.refresh();\n\n        const hostId = this.connection.hostId\n        this.peerId = this.connection.peerId\n        this.isHost = this.connection.isHosting\n\n        this.createMap()\n\n        // if (this.connection.isHosting) {\n            this.setupCollisions()\n        // }\n\n        let hostIdText = this.add.text(6, 6, 'Game join code: ' + hostId, {\n            font: '12px Arial',\n            fill: '#ffffff'\n        }).setScrollFactor(0);\n\n\n        this.renderSprites()\n\n        this.input.on('pointermove', (cursor) => {\n            if (!this.player) {\n                return\n            }\n            const angle = Phaser.Math.Angle.Between(this.player.sprite.x, this.player.sprite.y, cursor.x + this.cameras.main.scrollX, cursor.y + this.cameras.main.scrollY)\n            this.player.turret.setRotation(angle + (Math.PI / 2))\n        })\n\n        this.input.on('pointerdown', (pointer) => {\n            this.shootWeapon()\n        })\n\n    }\n\n    createMap() {\n        const {width, height, tileTexture, tileTextureFrame, objects} = this.mapData\n        let ts = this.add.tileSprite(0, 0, width, height, tileTexture, tileTextureFrame)\n        // this.cameras.main.setZoom(0.5);\n\n        for (let o of objects) {\n            const sprite = this.physics.add.image(o.x, o.y, o.texture, o.textureFrame)\n            sprite.body.setImmovable(true)\n            if (o.playerCollision) {\n                this.objectPlayerCollideGroup.add(sprite)\n            }\n            if (o.bulletCollision) {\n                this.objectProjectileCollideGroup.add(sprite)\n                this.objectProjectileCollideGroup.refresh()\n            }\n        }\n\n        this.physics.world.setBounds(-width/2, -height/2, width, height);\n    }\n\n    setupCollisions() {\n        console.log(\"setting colllsions\")\n        //player collides with player\n        this.physics.add.collider(this.playersGroup, this.playersGroup);\n        \n        //player collides with map object\n        this.physics.add.collider(this.objectPlayerCollideGroup, this.playersGroup);\n        //projctile collides with map object \n        this.physics.add.collider(this.objectProjectileCollideGroup, this.projectilesGroup, this.onProjectileCollideWithObject);\n        //projctile collides with player\n        this.physics.add.overlap(this.playersGroup, this.projectilesGroup, this.onProjectileCollideWithPlayer);\n    }\n\n    onProjectileCollideWithObject(object, projectile) {\n        // projectile.didCollideWithObject(object)\n    }\n    \n    onProjectileCollideWithPlayer(player, projectile) {\n        //todo: destroy player\n    }\n\n    shootWeapon() {\n        const turretEnd = this.player.turret.getTopCenter(null, true)\n        const x = turretEnd.x\n        const y = turretEnd.y\n        const direction = this.player.turret.rotation - (Math.PI / 2)\n\n        const weaponData = {\n            playerId: this.peerId,\n            x,\n            y,\n            direction\n        }\n        this.gameState.shootWeapon(weaponData)\n\n    }\n\n    renderSprites() {\n        this.renderPlayers()\n        this.renderProjectiles()\n    }\n\n    renderPlayers() {\n        const allPlayers = this.gameState.getPlayers()\n        for (let p of allPlayers) {\n\n\n            if (!this.players[p.id]) { //add new sprite\n\n                const sprite = this.physics.add.sprite(p.x, p.y, p.texture, p.textureFrame)\n                this.playersGroup.add(sprite)\n                sprite.setRotation(p.rotation).setDrag(500).setScale(p.scale)\n\n\n                const label = this.add.text(sprite.body.x, sprite.body.y + 40, p.name, {\n                    font: '12px Arial',\n                    fill: '#ffffff',\n                    align: 'center'\n                })\n\n                const turret = this.add.sprite(p.x, p.y, \"tanks\", \"barrelBlack\")\n                    .setRotation(p.rotation)\n                    .setOrigin(0.5,1.2)\n                    .setScale(p.scale)\n\n                const weaponData = getWeaponData(p.weapon)\n                const weapon = new ProjectileWeapon(this, weaponData);\n\n                this.players[p.id] = {label, sprite, turret, weapon}\n\n                if (p.id === this.peerId) {\n                    this.player = this.players[p.id]\n                    this.cameras.main.startFollow(sprite);\n                }\n\n                \n\n                sprite.setCollideWorldBounds(true);\n\n            } else { // update the existing sprite\n                const {sprite, turret, label } = this.players[p.id]\n                sprite.setX(p.x).setY(p.y)\n                sprite.setTexture(p.texture, p.textureFrame).setRotation(p.rotation)\n\n                turret.setX(sprite.body.x + (sprite.displayWidth/2)).setY(sprite.body.y + (sprite.displayHeight/2))\n                turret.setRotation(p.turretRotation)\n\n                label.setX(sprite.body.x).setY(sprite.body.y + (sprite.displayHeight) + 10)\n\n                if (p.status === \"disconnected\") {\n                    sprite.setActive(false);\n                    sprite.setVisible(false);\n                    turret.setActive(false);\n                    turret.setVisible(false);\n                    label.setActive(false);\n                    label.setVisible(false);\n                }\n            }\n\n        }\n\n    }\n\n    renderProjectiles() {\n        const allProjectiles = this.gameState.getProjectiles()\n        for (let p of allProjectiles) {\n            if (!this.projectiles[p.id]) { //add new sprite\n                let projectile = new ProjectileSprite({\n                    scene: this,\n                    group: this.projectilesGroup,\n                    ...p\n                })\n                \n                this.projectiles[p.id] = projectile\n\n                projectile.on(\"destroy\", () => {\n                    this.gameState.removeProjectile(projectile.config.id)\n                    delete this.projectiles[projectile.config.id]\n                })\n\n                projectile.on('bounce-off-horizontal', () => {\n                    this.gameState.updateProjectile({\n                        id: projectile.config.id,\n                        velocityY: -projectile.config.velocityY\n                    })\n                })\n\n            } else {\n\n                if (!this.isHost) {\n                    this.projectiles[p.id].setX(p.x)\n                    this.projectiles[p.id].setY(p.y)\n                }\n                \n            }\n\n            \n        }\n\n        const projectileKeys = allProjectiles.map(p => p.id)\n\n        //check if a projectile no longer exists and delete\n        for (let [key, projectile] of Object.entries(this.projectiles)) {\n            if(!projectileKeys.includes(key)) {\n                projectile.destroy()\n                delete this.projectiles[key]\n            }\n        }\n\n    }\n\n    updatePlayerState() {\n        let newPlayerState = {\n            id: this.peerId,\n            x: this.player.sprite.x,\n            y: this.player.sprite.y,\n            texture: this.player.sprite.texture.key,\n            textureFrame: this.player.sprite.frame.name,\n            rotation: this.player.sprite.rotation,\n            turretRotation: this.player.turret.rotation,\n        }\n\n        this.gameState.updatePlayer(newPlayerState)\n    }\n\n\n    // Host only\n    updateProjectileStates() {\n        const projectilePositions = []\n        for (let [key, projectile] of Object.entries(this.projectiles)) {\n            \n            //Projectile goes out of bounds\n            if (!this.physics.world.bounds.contains(projectile.x, projectile.y)) {\n                projectile.destroy();\n                this.gameState.removeProjectile(key)\n                delete this.projectiles[key]\n\n            }\n\n            projectilePositions.push({\n                id: key,\n                x: projectile.x,\n                y: projectile.y\n            })\n        }\n\n        this.gameState.updateProjectiles(projectilePositions)\n    }\n\n    setPlayerVelocity(xSpeed, ySpeed) {\n        this.player.sprite.body.setVelocity(xSpeed, ySpeed)\n    }\n\n\n    update() {\n\n        if (!this.player) {\n            return\n        }\n        const speed = 200\n\n\n        if (this.cursors.left.isDown || this.cursors.left_alt.isDown) {\n            // this.player.sprite.body.setVelocity(-speed, 0)\n            this.setPlayerVelocity(-speed, 0)\n            this.player.sprite.setRotation(Math.PI* 3 /2)\n\n        } else if (this.cursors.right.isDown || this.cursors.right_alt.isDown) {\n            this.player.sprite.body.setVelocity(speed, 0)\n            this.player.sprite.setRotation(Math.PI /2)\n\n        } else if (this.cursors.up.isDown || this.cursors.up_alt.isDown) {\n            this.player.sprite.body.setVelocity(0, -speed)\n            this.player.sprite.setRotation(0)\n\n        } else if (this.cursors.down.isDown || this.cursors.down_alt.isDown) {\n            this.player.sprite.body.setVelocity(0, speed)\n            this.player.sprite.setRotation(Math.PI)\n        } else {\n            // this.player.sprite.body.setVelocity(0, 0)\n        }\n\n\n        this.updatePlayerState()\n        if (this.isHost) {\n            this.updateProjectileStates()\n        }\n\n        this.renderSprites()\n\n        \n    }\n}","export const playerDefaults = {\n    texture: \"tanks\",\n    textureFrame: \"tankBlack\",\n    scale: 0.5,\n    weapon: \"blaster\",\n    rotation: 0,\n    turretRotation: 0\n\n}","import Phaser from 'phaser'\n\nimport Preloader from './scenes/Preloader'\nimport Game from './scenes/Game'\nimport Connection from './multiplayer/connection'\nimport GameState from \"./gameState\";\nimport { playerDefaults } from './game_data/players';\n\nconst connection = new Connection()\nconst gameState = new GameState(connection)\n\nwindow.connection = connection\nwindow.gameState = gameState\n\n\nconst config = {\n\ttype: Phaser.AUTO,\n\twidth: 800,\n\theight: 600,\n\tparent: \"game-container\",\n\tphysics: {\n\t\tdefault: 'arcade',\n\t\tarcade: {\n\t\t\tgravity: { y: 0 },\n\t\t\tdebug: false\n\t\t}\n\t},\n\tscale: {\n\t\tmode: Phaser.Scale.FIT,\n\t},\n\tscene: [Preloader, Game]\n}\n\n\nfunction start() {\n\tconst gameSetup = document.querySelector(\"#game-setup\")\n\tgameSetup.style.display = \"none\"\n\n\n\tconst game = new Phaser.Game(config)\n\n\tgame.registry.set('connection', connection)\n\tgame.registry.set('gameState', gameState)\n\n}\n\nfunction hostGame(username) {\n\tconnection.beginHosting()\n\n\tgameState.addPlayer({\n\t\t...playerDefaults,\n\t\tid: connection.peerId,\n\t\tname: username,\n\t\tx: 100,\n\t\ty: 100\n\t})\n\n\tgameState.setMapName(\"base\")\n\n\n\n\tconst newUrl = window.location.origin + window.location.pathname + '?gameId=' + connection.hostId;\n\twindow.history.pushState({path:newUrl},'',newUrl);\n\n\tstart()\n\n}\n\nasync function joinGame(username, hostId) {\n\tconst playerDetails = {\n\t\t...playerDefaults,\n\t\tid: connection.peerId,\n\t\tname: username,\n\t\tx: 200,\n\t\ty: 200\n\t}\n\ttry {\n\t\tawait connection.connectToHost(hostId, playerDetails)\n\t\tstart()\n\t} catch(e) {\n\t\talert(\"could not connect to game ID \" + hostId)\n\t}\n}\n\nfunction showTab(id) {\n\tconst tabContents = document.querySelectorAll(\".tabcontent\")\n\tfor (let tabContent of tabContents) {\n\t\ttabContent.style.display = \"none\"\n\t}\n\n\tconst tabLinks = document.querySelectorAll(\"button.tablinks\")\n\tfor (let tabLink of tabLinks) {\n\t\tif (tabLink.getAttribute(\"tab\") === id) {\n\t\t\ttabLink.classList.add(\"active\")\n\t\t} else {\n\t\t\ttabLink.classList.remove(\"active\")\n\t\t}\n\t}\n\n\tconst selectedTab = document.getElementById(id)\n\tselectedTab.style.display = \"\";\n\n}\n\nwindow.onload = function() {\n\n\tconst userNameInput = document.querySelector(\"#username\")\n\tconst joinGameIdInput = document.querySelector(\"#join-game-id\")\n\tconst joinButton = document.querySelector(\"#join-button\")\n\tconst hostButton = document.querySelector(\"#host-button\")\n\n\tconst tabButtons = document.querySelectorAll(\"button.tablinks\")\n\tfor (let tabButton of tabButtons) {\n\t\ttabButton.addEventListener('click', () => {\n\t\t\tshowTab(tabButton.getAttribute('tab'))\n\t\t})\n\t}\n\tshowTab(\"join\")\n\n\thostButton.addEventListener('click', () => {\n\t\tif (!userNameInput.value) {\n\t\t\talert(\"Please enter a username\")\n\t\t} else {\n\t\t\thostGame(userNameInput.value)\n\t\t}\n\t})\n\n\tjoinButton.addEventListener('click', () => {\n\t\tif (!userNameInput.value) {\n\t\t\talert(\"Please enter a username\")\n\t\t\treturn\n\t\t}\n\n\t\tif (!joinGameIdInput.value) {\n\t\t\talert(\"Please enter a game ID to join\")\n\t\t\treturn\n\t\t}\n\n\t\tjoinGame(userNameInput.value, joinGameIdInput.value)\n\t})\n\n\tconst searchParams = new URLSearchParams(window.location.search);\n\tif (searchParams.has(\"gameId\")) {\n\t\tjoinGameIdInput.value = searchParams.get(\"gameId\")\n\t}\n\n}\n\n","import Peer from 'peerjs';\n\nexport default class Connection {\n    constructor() {\n        this.isHosting = null\n        this.guestConnections = {}\n        this.hostConnection = null\n        this.peerId = generateId()\n        this.hostId = null\n\n        this.peer = new Peer(this.peerId, {\n            host: 'richard-peerjs-server.herokuapp.com',\n            port: 443,\n            path: '/',\n            secure: true\n        });\n\n        this.peer.on('open', id => {\n            this.peerId = id\n            console.log('Connection to server established. ID is: ' + id);\n        });\n\n        this.peer.on('error', err => {\n            console.log('Error1: ', err);\n            console.log('reconnecting');\n            // todo reconnect\n            this.peer.disconnect()\n            this.peer.reconnect()\n        });\n    }\n\n    async beginHosting() {\n        this.isHosting = true\n        this.hostId = this.peerId\n        this.peer.on('connection', async (connection) => {\n            this.guestConnections[connection.peer] = connection\n\n            connection.send(\"hello from host\")\n\n            console.log('Connecting to peer ' + connection.peer);\n            await this.setupConnectionHandlers(connection)\n            //todo handle connection close\n\n            if (this.onGuestConnected) {\n                this.onGuestConnected(connection.peer, connection.metadata)\n            }\n        });\n    }\n\n    async connectToHost(hostId, metadata) {\n        this.isHosting = false\n        console.log(\"connecting to \" + hostId)\n        this.hostConnection = this.peer.connect(hostId, {metadata});\n\n        this.hostConnection.send(\"hello from guest\")\n        this.hostId = this.hostConnection.peer\n        console.log(\"waiting for connection...\")\n        await this.setupConnectionHandlers(this.hostConnection)\n        //todo handle connection close\n        if (this.onConnectedToHost) {\n            this.onConnectedToHost(this.hostConnection.peer, this.hostConnection.metadata)\n        }\n    }\n\n    sendToHost(data) {\n        if (this.isHosting) {\n            throw new Error(\"Cannot send data to host if you are hosting\")\n        }\n        this.hostConnection.send(data);\n    }\n\n    sendToGuest(peerId, data) {\n        if (!this.isHosting) {\n            throw new Error(\"Cannot send data to guest if you are not the host\")\n        }\n        this.guestConnections[peerId].send(data);\n    }\n\n    sendToAllGuests(data) {\n        if (!this.isHosting) {\n            throw new Error(\"Cannot send data to guest if you are not the host\")\n        }\n        for (let peerId of Object.keys(this.guestConnections)) {\n            if (this.guestConnections[peerId].open) {\n                this.guestConnections[peerId].send(data);\n            }\n\n        }\n\n    }\n\n    async ensureConnectionOpen(conn) {\n        return new Promise((resolve, reject) => {\n            if (conn.open) {\n                resolve()\n            }\n            console.log(conn)\n            conn.on('open', function () {\n                console.log(\"Connection open\")\n                resolve()\n            });\n\n            conn.on('error', function (error) {\n                console.error('Connection error', error);\n                reject()\n            });\n\n            this.peer.on('error', err => {\n                console.error(err);\n                reject()\n            });\n        })\n    }\n\n    async setupConnectionHandlers(conn) {\n        await this.ensureConnectionOpen(conn)\n\n        conn.on('data', (data) => {\n            if (this.onMessage) {\n                this.onMessage(data)\n            }\n        });\n\n\n\n        conn.on('close', () => {\n            if (this.onGuestDisconnected) {\n                this.onGuestDisconnected(conn.metadata)\n            }\n        });\n\n        // this.conn.send('Hello from ' + this.peer.id);\n    }\n\n}\n\nfunction generateId(length = 6) {\n    let result = '';\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n}\n\n","import deepEquals from \"fast-deep-equal/es6\"\nimport { getWeaponData } from \"./game_data/weapons\"\nimport Phaser from 'phaser'\n\n/*\nplayer: {\n    id: connection.peerId,\n    name: username,\n    x: 100,\n    y: 100,\n    texture: \"tanks\",\n    textureFrame: \"tankBlack\",\n    weapon: \"blaster\",\n    weaponLastFired: 1618407757096,\n    rotation: 0,\n    turretRotation: 0,\n    status: 'connected'\n}\n\nprojectile: {\n    id: projectileData.playerId + \"_\" + Date.now(),\n    playerId: projectileData.playerId,\n    rotation: projectileData.direction,\n    x: projectileData.x,\n    y: projectileData.y,\n    texture: weaponData.texture,\n    velocityX: velocity.x,\n    velocityY: velocity.y,\n}\n\n*/\n\nexport default class GameState {\n    constructor(connection) {\n        this.connection = connection\n        this.setupConnectionHandlers()\n\n        this.state = {\n            map: null,\n            players: {\n\n            },\n            projectiles: {\n\n            },\n            messages: []\n        }\n    }\n\n    setMapName(map) {\n        this.state.map = map\n    }\n\n    getMapName() {\n        return this.state.map\n    }\n\n    sendUpdatedGameState() {\n        if (this.connection.isHosting) {\n            this.connection.sendToAllGuests({\n                type: \"game-state\",\n                data: this.state\n            })\n        } else {\n            console.error(\"cannot sent data to all guests if you are not the host\")\n        }\n    }\n\n    sendPlayerStateToHost(player) {\n        if (!this.connection.isHosting) {\n            this.connection.sendToHost({\n                type: \"player-state\",\n                data: player\n            })\n        } else {\n            console.error(\"cannot sent player data to host if you are the host\")\n        }\n\n    }\n\n    setupConnectionHandlers() {\n        this.connection.onGuestConnected = (peerId, metaData) => {\n            console.log(\"connected \" + peerId)\n            this.state.messages.push(metaData.name + \" has joined the game\")\n            this.addPlayer(metaData)\n        }\n\n        this.connection.onGuestDisconnected = (metaData) => {\n            console.log(\"player left \" + metaData.id)\n            //todo: handle this if the person who left is the host\n            this.state.messages.push(metaData.name + \" has left the game\")\n            this.removePlayer(metaData)\n        }\n\n        this.connection.onMessage = (message) => {\n            switch (message.type) {\n                case \"game-state\":\n                    this.state = message.data\n                    break;\n                case \"player-state\":\n                    this.state.players[message.data.id] = message.data\n                    this.sendUpdatedGameState()\n                    break;\n                case \"shoot-weapon\":\n                    this.addProjectile(message.data)\n                    break;\n            }\n        }\n\n    }\n\n    addPlayer(player) {\n        this.state.players[player.id] = player\n        //Init defaults\n        this.state.players[player.id].status = \"connected\"\n        this.state.players[player.id].weapon = \"blaster\"\n        this.state.players[player.id].weaponLastFired = 0\n        this.sendUpdatedGameState()\n    }\n\n    removePlayer(player) {\n        this.state.players[player.id].status = \"disconnected\"\n        this.sendUpdatedGameState()\n    }\n    \n    removeProjectile(projectileId) {\n        delete this.state.projectiles[projectileId]\n        this.sendUpdatedGameState()\n    }\n\n    getPlayers() {\n        return Object.values(this.state.players)\n    }\n\n    getProjectiles() {\n        return Object.values(this.state.projectiles)\n    }\n\n    updatePlayer(updatedPlayer) {\n        const oldPlayerState = this.state.players[updatedPlayer.id]\n\n        if (!deepEquals(oldPlayerState, updatedPlayer)) {\n            this.state.players[updatedPlayer.id] = { ...this.state.players[updatedPlayer.id], ...updatedPlayer }\n\n            if (this.connection.isHosting) {\n                this.sendUpdatedGameState()\n            } else {\n                this.sendPlayerStateToHost(this.state.players[updatedPlayer.id])\n            }\n        }\n\n    }\n\n    updateProjectiles(updatedProjectiles) {\n        for (let p of updatedProjectiles) {\n            if (this.state.projectiles[p.id]) {\n                this.state.projectiles[p.id] = {\n                    ...this.state.projectiles[p.id],\n                    ...p\n                }\n            }\n        }\n        this.sendUpdatedGameState()\n    }\n\n    updateProjectile(updatedProjectile) {\n        if (this.state.projectiles[updatedProjectile.id]) {\n            this.state.projectiles[updatedProjectile.id] = {\n                ...this.state.projectiles[updatedProjectile.id],\n                ...updatedProjectile\n            }\n        }\n        this.sendUpdatedGameState()\n    }\n\n    velocityFromRotation(rotation, speed) {\n        const vec = new Phaser.Math.Vector2()\n        vec.setToPolar(rotation, speed)\n        return vec\n    }\n\n    addProjectile(projectileData) {\n        if (!this.connection.isHosting) {\n            console.error(\"only the host can add projectiles to the game state\")\n            return\n        }\n        const shootingPlayer = this.state.players[projectileData.playerId]\n        const weaponId = shootingPlayer.weapon\n        const weaponData = getWeaponData(weaponId)\n        //check fire rate\n\n        //check max number projectiles\n\n        const velocity = this.velocityFromRotation(projectileData.direction, weaponData.projectile_speed)\n\n        const projectileId = projectileData.playerId + \"_\" + Date.now()\n        this.state.projectiles[projectileId] = {\n            id: projectileData.playerId + \"_\" + Date.now(),\n            playerId: projectileData.playerId,\n            rotation: projectileData.direction + (Math.PI / 2),\n            x: projectileData.x,\n            y: projectileData.y,\n            texture: weaponData.texture,\n            textureFrame: weaponData.textureFrame,\n            scale: weaponData.scale,\n            tint: weaponData.tint,\n            velocityX: velocity.x,\n            velocityY: velocity.y,\n            maxBounces: weaponData.max_bounces\n        }\n    }\n\n    shootWeapon(projectileData) {\n        if (this.connection.isHosting) {\n            this.addProjectile(projectileData)\n        } else {\n            this.connection.sendToHost({\n                type: \"shoot-weapon\",\n                data: projectileData\n            })\n        }\n    }\n\n}"],"names":["modulePath","importFunctionName","Function","error","baseURL","URL","location","cleanup","script","revokeObjectURL","src","remove","url","Promise","resolve","reject","absURL","self","moduleMap","moduleBlob","Blob","type","Object","assign","document","createElement","createObjectURL","[object Object]","Error","head","appendChild","p","Phaser","Scene","load","spritesheet","frameWidth","image","atlasXML","scene","start","Physics","Arcade","Sprite","x","y","worldBounds","physics","world","bounds","direction","weaponData","body","reset","setCollideWorldBounds","setActive","setVisible","velocityFromRotation","projectile_speed","this","velocity","time","delta","preUpdate","contains","Group","createMultiple","frameQuantity","max_projectiles","key","texture","active","visible","bounceX","bounceY","classType","ProjectileWeaponBullet","Date","now","lastFire","fire_delay","bullet","getFirstDead","fire","maps","id","name","height","width","tileTexture","tileTextureFrame","objects","textureFrame","playerCollision","bulletCollision","weapons","scale","tint","max_bounces","weaponId","find","m","config2","group","add","existing","config","setScale","setRotation","rotation","setTint","setVelocity","velocityX","velocityY","setBounce","numCollisions","object","maxBounces","destroy","log","emit","player","players","projectiles","mapId","cursors","input","keyboard","addKeys","up","Input","Keyboard","KeyCodes","UP","down","DOWN","left","LEFT","right","RIGHT","space","SPACE","shift","SHIFT","up_alt","W","down_alt","S","left_alt","A","right_alt","D","connection","registry","get","gameState","mapData","getMapName","game","playersGroup","projectilesGroup","objectPlayerCollideGroup","objectProjectileCollideGroup","staticGroup","hostId","peerId","isHost","isHosting","createMap","setupCollisions","text","font","fill","setScrollFactor","renderSprites","on","cursor","angle","Math","Angle","Between","sprite","cameras","main","scrollX","scrollY","turret","PI","pointer","shootWeapon","tileSprite","o","setImmovable","refresh","setBounds","collider","onProjectileCollideWithObject","overlap","onProjectileCollideWithPlayer","projectile","turretEnd","getTopCenter","playerId","renderPlayers","renderProjectiles","allPlayers","getPlayers","p2","label","setX","setY","setTexture","displayWidth","displayHeight","turretRotation","status","setDrag","align","setOrigin","getWeaponData","weapon","ProjectileWeapon","startFollow","allProjectiles","getProjectiles","ProjectileSprite","__assign","removeProjectile","updateProjectile","projectileKeys","map","entries","includes","newPlayerState","frame","updatePlayer","projectilePositions","push","updateProjectiles","xSpeed","ySpeed","speed","isDown","setPlayerVelocity","updatePlayerState","updateProjectileStates","playerDefaults","guestConnections","hostConnection","length","result","characters","i","charAt","floor","random","generateId","peer","Peer","host","port","path","secure","err","disconnect","reconnect","async","connection2","send","setupConnectionHandlers","onGuestConnected","metadata","connect","onConnectedToHost","data","keys","open","conn","ensureConnectionOpen","onMessage","onGuestDisconnected","state","messages","sendToAllGuests","sendToHost","metaData","addPlayer","removePlayer","message","sendUpdatedGameState","addProjectile","weaponLastFired","projectileId","values","updatedPlayer","oldPlayerState","deepEquals","sendPlayerStateToHost","updatedProjectiles","updatedProjectile","vec","Vector2","setToPolar","projectileData","window","AUTO","parent","default","arcade","gravity","debug","mode","Scale","FIT","Preloader","Game","querySelector","style","display","set","tabContents","querySelectorAll","tabContent","tabLinks","tabLink","getAttribute","classList","getElementById","onload","userNameInput","joinGameIdInput","joinButton","hostButton","tabButtons","tabButton","addEventListener","value","username","beginHosting","setMapName","newUrl","origin","pathname","history","pushState","playerDetails","connectToHost","e","searchParams","URLSearchParams","search","has"],"mappings":"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"}