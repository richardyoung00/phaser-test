{"version":3,"file":"index.e685067a.js","sources":["../../vite/dynamic-import-polyfill","../../src/scenes/Preloader.js","../../public/textures/sokoban_tilesheet.png","../../public/textures/characters.png","../../public/textures/concrete.jpg","../../public/textures/bullet_1.png","../../public/textures/tanks/sheet_tanks.png","../../public/textures/tanks/sheet_tanks.xml?url","../../public/textures/tilesheet_map.png","../../src/modules/ProjectileWeapon.js","../../src/game_data/maps/base.js","../../src/game_data/maps/index.js","../../src/game_data/weapons/blaster.js","../../src/game_data/weapons/index.js","../../src/scenes/Game.js","../../src/main.js","../../src/multiplayer/connection.js","../../src/gameState.js"],"sourcesContent":["const p = function polyfill(modulePath = '.', importFunctionName = '__import__') {\n    try {\n        self[importFunctionName] = new Function('u', `return import(u)`);\n    }\n    catch (error) {\n        const baseURL = new URL(modulePath, location);\n        const cleanup = (script) => {\n            URL.revokeObjectURL(script.src);\n            script.remove();\n        };\n        self[importFunctionName] = (url) => new Promise((resolve, reject) => {\n            const absURL = new URL(url, baseURL);\n            // If the module has already been imported, resolve immediately.\n            if (self[importFunctionName].moduleMap[absURL]) {\n                return resolve(self[importFunctionName].moduleMap[absURL]);\n            }\n            const moduleBlob = new Blob([\n                `import * as m from '${absURL}';`,\n                `${importFunctionName}.moduleMap['${absURL}']=m;`\n            ], { type: 'text/javascript' });\n            const script = Object.assign(document.createElement('script'), {\n                type: 'module',\n                src: URL.createObjectURL(moduleBlob),\n                onerror() {\n                    reject(new Error(`Failed to import: ${url}`));\n                    cleanup(script);\n                },\n                onload() {\n                    resolve(self[importFunctionName].moduleMap[absURL]);\n                    cleanup(script);\n                }\n            });\n            document.head.appendChild(script);\n        });\n        self[importFunctionName].moduleMap = {};\n    }\n};__VITE_IS_MODERN__&&p(\"/phaser-test/assets/\");","import Phaser from 'phaser'\n\nimport sokoban_tilesheet from '../../public/textures/sokoban_tilesheet.png'\nimport character from '../../public/textures/characters.png'\nimport concrete from '../../public/textures/concrete.jpg'\nimport bullet_1 from '../../public/textures/bullet_1.png'\n\nimport tanksSheet from '../../public/textures/tanks/sheet_tanks.png'\nimport tanksAtlas from '../../public/textures/tanks/sheet_tanks.xml?url'\n\nimport mapTilesheet from '../../public/textures/tilesheet_map.png'\n\nexport default class Preloader extends Phaser.Scene {\n    constructor() {\n        super('preloader')\n    }\n\n    preload() {\n        this.load.spritesheet('sokoban', sokoban_tilesheet, {\n            frameWidth: 64\n        })\n        this.load.image('character', character);\n        this.load.image('concrete', concrete);\n        this.load.image('bullet_1', bullet_1);\n\n        this.load.atlasXML('tanks', tanksSheet, tanksAtlas)\n        this.load.spritesheet('map', mapTilesheet,{frameWidth: 64})\n    }\n\n    create() {\n        this.scene.start('game')\n    }\n}","export default \"__VITE_ASSET__a7f7b83c__\"","export default \"__VITE_ASSET__abe55e0a__\"","export default \"__VITE_ASSET__b037b885__\"","export default \"__VITE_ASSET__9a497132__\"","export default \"__VITE_ASSET__545bac47__\"","export default \"__VITE_ASSET__23e8bf82__\"","export default \"__VITE_ASSET__a3075eac__\"","import Phaser from 'phaser'\n\nclass ProjectileWeaponBullet extends Phaser.Physics.Arcade.Sprite {\n    constructor(scene, x, y) {\n        super(scene, x, y, 'bullet_1');\n        this.worldBounds = scene.physics.world.bounds\n\n    }\n\n    fire(x, y, direction, weaponData) {\n        this.body.reset(x, y);\n        this.body.setCollideWorldBounds(false);\n\n        this.setActive(true);\n        this.setVisible(true);\n\n        this.scene.physics.velocityFromRotation(direction, weaponData.projectile_speed, this.body.velocity);\n\n    }\n\n    preUpdate(time, delta) {\n        super.preUpdate(time, delta);\n\n        if (!this.worldBounds.contains(this.x, this.y)) {\n            this.setActive(false);\n            this.setVisible(false);\n        }\n    }\n\n}\n\nexport default class ProjectileWeapon extends Phaser.Physics.Arcade.Group {\n    constructor(scene, weaponData) {\n        super(scene.physics.world, scene);\n        this.weaponData = weaponData\n\n        this.createMultiple({\n            frameQuantity: this.weaponData.max_projectiles,\n            key: this.weaponData.texture,\n            active: false,\n            visible: false,\n            bounceX: 1,\n            bounceY: 1,\n            classType: ProjectileWeaponBullet\n        });\n    }\n\n    fireBullet(x, y, direction) {\n        if (Date.now() - this.lastFire < this.weaponData.fire_delay) {\n            return\n        }\n\n        let bullet = this.getFirstDead(false);\n\n        if (bullet) {\n            bullet.fire(x, y, direction, this.weaponData);\n            this.lastFire = Date.now()\n        }\n        return bullet\n    }\n\n}","export const base = {\n    id: \"base\",\n    name: \"Base Map\",\n    height: 1000,\n    width: 1000,\n    tileTexture: \"map\",\n    tileTextureFrame: 0,\n    objects: [\n        {\n            texture: \"map\",\n            textureFrame: 357,\n            x: 0,\n            y: 0,\n            playerCollision: true,\n            bulletCollision: true\n        }\n    ]\n}","import { base } from './base'\n\nexport const maps = [\n    base\n]\n\nexport function getMapData(mapId) {\n    return maps.find(m => m.id === mapId)\n}","export const blaster = {\n    id: \"blaster\",\n    name: \"Blaster\",\n    texture: \"tanks\",\n    textureFrame: \"bulletSilver\",\n    scale: 0.4,\n    tint: 0x000000,\n    max_projectiles: 10,\n    fire_delay: 600,\n    num_bounces: 1,\n    projectile_speed: 600\n}","import { blaster } from './blaster'\n\nexport const weapons = [\n    blaster\n]\n\nexport function getWeaponData(weaponId) {\n    return weapons.find(m => m.id === weaponId)\n}","import Phaser from 'phaser'\nimport ProjectileWeapon from \"../modules/ProjectileWeapon\";\nimport {getMapData} from \"../game_data/maps\";\nimport {getWeaponData} from \"../game_data/weapons\";\n\nexport default class Game extends Phaser.Scene {\n\n    /** @type {Phaser.Types.Input.Keyboard.CursorKeys} */\n    cursors\n\n    /** @type {Phaser.Physics.Arcade.Sprite} */\n    player\n\n    constructor() {\n        super('game')\n        this.player = null\n        this.players = {}\n\n        this.projectiles = {}\n        \n\n    }\n\n    init() {\n\n        this.cursors = this.input.keyboard.addKeys({\n            up: Phaser.Input.Keyboard.KeyCodes.UP,\n            down: Phaser.Input.Keyboard.KeyCodes.DOWN,\n            left: Phaser.Input.Keyboard.KeyCodes.LEFT,\n            right: Phaser.Input.Keyboard.KeyCodes.RIGHT,\n            space: Phaser.Input.Keyboard.KeyCodes.SPACE,\n            shift: Phaser.Input.Keyboard.KeyCodes.SHIFT,\n            up_alt: Phaser.Input.Keyboard.KeyCodes.W,\n            down_alt: Phaser.Input.Keyboard.KeyCodes.S,\n            left_alt: Phaser.Input.Keyboard.KeyCodes.A,\n            right_alt: Phaser.Input.Keyboard.KeyCodes.D\n        });\n        this.connection = this.registry.get('connection')\n        this.gameState = this.registry.get('gameState')\n        this.mapData = getMapData(this.gameState.getMapName())\n\n\n        window.game = this\n    }\n\n    create() {\n\n        // Collision groups\n        this.playersGroup = this.physics.add.group()\n        this.projectilesGroup = this.physics.add.group()\n        this.objectPlayerCollideGroup = this.add.group()\n        this.objectProjectileCollideGroup = this.physics.add.staticGroup()\n\n        const {width, height} = this.scale\n\n        // Set aspect ratio to the same as viewport (may break on portrait or weird sized screens)\n        // const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\n        // const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)\n        // this.scale.displaySize.setAspectRatio( vw/vh );\n        // this.scale.refresh();\n\n        const hostId = this.connection.hostId\n        this.peerId = this.connection.peerId\n        this.isHost = this.connection.isHosting\n\n        this.createMap()\n\n        if (this.connection.isHosting) {\n            this.setupCollisions()\n        }\n\n        let hostIdText = this.add.text(6, 6, 'Game join code: ' + hostId, {\n            font: '12px Arial',\n            fill: '#ffffff'\n        }).setScrollFactor(0);\n\n\n        this.renderSprites()\n\n        this.input.on('pointermove', (cursor) => {\n            if (!this.player) {\n                return\n            }\n            const angle = Phaser.Math.Angle.Between(this.player.sprite.x, this.player.sprite.y, cursor.x + this.cameras.main.scrollX, cursor.y + this.cameras.main.scrollY)\n            this.player.turret.setRotation(angle + (Math.PI / 2))\n        })\n\n        this.input.on('pointerdown', (pointer) => {\n            this.shootWeapon()\n        })\n\n    }\n\n    createMap() {\n        const {width, height, tileTexture, tileTextureFrame, objects} = this.mapData\n        let ts = this.add.tileSprite(0, 0, width, height, tileTexture, tileTextureFrame)\n        // this.cameras.main.setZoom(0.8);\n\n        for (let o of objects) {\n            const sprite = this.physics.add.image(o.x, o.y, o.texture, o.textureFrame)\n            sprite.body.setImmovable(true)\n            if (o.playerCollision) {\n                this.objectPlayerCollideGroup.add(sprite)\n            }\n            if (o.bulletCollision) {\n                this.objectProjectileCollideGroup.add(sprite)\n                this.objectProjectileCollideGroup.refresh()\n            }\n        }\n\n        this.physics.world.setBounds(-width/2, -height/2, width, height);\n    }\n\n    setupCollisions() {\n        console.log(\"setting colllsions\")\n        //player collides with map object\n        this.physics.add.collider(this.objectPlayerCollideGroup, this.playersGroup);\n        //projctile collides with map object \n        this.physics.add.overlap(this.objectProjectileCollideGroup, this.projectilesGroup, this.onProjectileCollideWithObject);\n        //projctile collides with player\n        this.physics.add.overlap(this.playersGroup, this.projectilesGroup, this.onProjectileCollideWithPlayer);\n    }\n\n    onProjectileCollideWithObject(object, projectile) {\n        //todo: destroy or bounce projectile here\n    }\n    \n    onProjectileCollideWithPlayer(player, projectile) {\n        //todo: destroy player\n    }\n\n    shootWeapon() {\n        const turretEnd = this.player.turret.getTopCenter(null, true)\n        const x = turretEnd.x\n        const y = turretEnd.y\n        const direction = this.player.turret.rotation - (Math.PI / 2)\n\n        const weaponData = {\n            playerId: this.peerId,\n            x,\n            y,\n            direction\n        }\n        this.gameState.shootWeapon(weaponData)\n\n    }\n\n    renderSprites() {\n        this.renderPlayers()\n        this.renderProjectiles()\n    }\n\n    renderPlayers() {\n        const allPlayers = this.gameState.getPlayers()\n        for (let p of allPlayers) {\n\n\n            if (!this.players[p.id]) { //add new sprite\n\n                const sprite = this.physics.add.sprite(p.x, p.y, p.texture, p.textureFrame).setRotation(p.rotation).setScale(0.5)\n                const label = this.add.text(p.x, p.y + 30, p.name, {\n                    font: '12px Arial',\n                    fill: '#ffffff',\n                    align: 'center'\n                }).setOrigin(0.5);\n\n                const turret = this.physics.add.sprite(p.x, p.y, \"tanks\", \"barrelBlack\").setRotation(p.rotation).setOrigin(0.5,1.2).setScale(0.5);\n\n                const weaponData = getWeaponData(p.weapon)\n                const weapon = new ProjectileWeapon(this, weaponData);\n\n                this.players[p.id] = {label, sprite, turret, weapon}\n\n                if (p.id === this.peerId) {\n                    this.player = this.players[p.id]\n                    this.cameras.main.startFollow(sprite);\n                }\n\n                this.playersGroup.add(sprite)\n\n                sprite.setCollideWorldBounds(true);\n\n            } else { // update the existing sprite\n                this.players[p.id].sprite.setX(p.x).setY(p.y)\n                this.players[p.id].sprite.setTexture(p.texture, p.textureFrame).setRotation(p.rotation)\n                this.players[p.id].turret.setX(p.x).setY(p.y)\n                this.players[p.id].turret.setRotation(p.turretRotation)\n                this.players[p.id].label.setX(p.x).setY(p.y + 30)\n\n                if (p.status === \"disconnected\") {\n                    this.players[p.id].sprite.setActive(false);\n                    this.players[p.id].sprite.setVisible(false);\n                    this.players[p.id].turret.setActive(false);\n                    this.players[p.id].turret.setVisible(false);\n                    this.players[p.id].label.setActive(false);\n                    this.players[p.id].label.setVisible(false);\n                }\n            }\n\n        }\n\n    }\n\n    renderProjectiles() {\n        const allProjectiles = this.gameState.getProjectiles()\n        for (let p of allProjectiles) {\n            if (!this.projectiles[p.id]) { //add new sprite\n                const projectile = this.physics.add.sprite(p.x, p.y, p.texture, p.textureFrame)\n                projectile.setScale(p.scale)\n                projectile.setTexture(p.texture, p.textureFrame)\n                projectile.setRotation(p.rotation)\n                projectile.setTint(p.tint)\n                this.projectilesGroup.add(projectile)\n                this.projectiles[p.id] = projectile\n                this.projectiles[p.id].setVelocity(p.velocityX, p.velocityY)\n\n            }  \n            // Not setting X and Y here could be a possible optimisation in case we get lag from server\n            this.projectiles[p.id].setX(p.x)\n            this.projectiles[p.id].setY(p.y)\n            \n        }\n\n        const projectileKeys = allProjectiles.map(p => p.id)\n\n        //check if a projectile no longer exists and delete\n        for (let [key, projectile] of Object.entries(this.projectiles)) {\n            if(!projectileKeys.includes(key)) {\n                projectile.destroy()\n                delete this.projectiles[key]\n            }\n        }\n\n    }\n\n    updatePlayerState() {\n        let newPlayerState = {\n            id: this.peerId,\n            x: this.player.sprite.x,\n            y: this.player.sprite.y,\n            texture: this.player.sprite.texture.key,\n            textureFrame: this.player.sprite.frame.name,\n            rotation: this.player.sprite.rotation,\n            turretRotation: this.player.turret.rotation,\n        }\n\n        this.gameState.updatePlayer(newPlayerState)\n    }\n\n\n    // Host only\n    updateProjectileStates() {\n        const projectilePositions = []\n        for (let [key, projectile] of Object.entries(this.projectiles)) {\n            \n            //Projectile goes out of bounds\n            if (!this.physics.world.bounds.contains(projectile.x, projectile.y)) {\n                projectile.destroy(false);\n                this.gameState.removeProjectile(key)\n                delete this.projectiles[key]\n\n            }\n\n            projectilePositions.push({\n                id: key,\n                x: projectile.x,\n                y: projectile.y\n            })\n        }\n\n        this.gameState.updateProjectilePositions(projectilePositions)\n    }\n\n\n    update() {\n\n        if (!this.player) {\n            return\n        }\n        const speed = 200\n\n        if (this.cursors.left.isDown || this.cursors.left_alt.isDown) {\n            this.player.sprite.body.setVelocity(-speed, 0)\n            this.player.sprite.setRotation(Math.PI* 3 /2)\n\n        } else if (this.cursors.right.isDown || this.cursors.right_alt.isDown) {\n            this.player.sprite.body.setVelocity(speed, 0)\n            this.player.sprite.setRotation(Math.PI /2)\n\n        } else if (this.cursors.up.isDown || this.cursors.up_alt.isDown) {\n            this.player.sprite.body.setVelocity(0, -speed)\n            this.player.sprite.setRotation(0)\n\n        } else if (this.cursors.down.isDown || this.cursors.down_alt.isDown) {\n            this.player.sprite.body.setVelocity(0, speed)\n            this.player.sprite.setRotation(Math.PI)\n        } else {\n            this.player.sprite.body.setVelocity(0, 0)\n        }\n\n        this.updatePlayerState()\n        if (this.connection.isHosting) {\n            this.updateProjectileStates()\n        }\n        this.renderSprites()\n        \n    }\n}","import Phaser from 'phaser'\n\nimport Preloader from './scenes/Preloader'\nimport Game from './scenes/Game'\nimport Connection from './multiplayer/connection'\nimport GameState from \"./gameState\";\n\nconst connection = new Connection()\nconst gameState = new GameState(connection)\n\nwindow.connection = connection\nwindow.gameState = gameState\n\n\nconst config = {\n\ttype: Phaser.AUTO,\n\twidth: 800,\n\theight: 600,\n\tparent: \"game-container\",\n\tphysics: {\n\t\tdefault: 'arcade',\n\t\tarcade: {\n\t\t\tgravity: { y: 0 },\n\t\t\tdebug: true\n\t\t}\n\t},\n\tscale: {\n\t\tmode: Phaser.Scale.FIT,\n\t},\n\tscene: [Preloader, Game]\n}\n\n\nfunction start() {\n\tconst gameSetup = document.querySelector(\"#game-setup\")\n\tgameSetup.style.display = \"none\"\n\n\n\tconst game = new Phaser.Game(config)\n\n\tgame.registry.set('connection', connection)\n\tgame.registry.set('gameState', gameState)\n\n}\n\nfunction hostGame(username) {\n\tconnection.beginHosting()\n\n\tgameState.addPlayer({\n\t\tid: connection.peerId,\n\t\tname: username,\n\t\tx: 100,\n\t\ty: 100,\n\t\ttexture: \"tanks\",\n\t\ttextureFrame: \"tankBlack\",\n\t\tweapon: \"blaster\",\n\t\trotation: 0,\n\t\tturretRotation: 0\n\t})\n\n\tgameState.setMapName(\"base\")\n\n\n\n\tconst newUrl = window.location.origin + window.location.pathname + '?gameId=' + connection.hostId;\n\twindow.history.pushState({path:newUrl},'',newUrl);\n\n\tstart()\n\n}\n\nasync function joinGame(username, hostId) {\n\tconst playerDetails = {\n\t\tid: connection.peerId,\n\t\tname: username,\n\t\tx: 200,\n\t\ty: 200,\n\t\ttexture: \"tanks\",\n\t\ttextureFrame: \"tankBlack\",\n\t\tweapon: \"blaster\",\n\t\trotation: 0,\n\t\tturretRotation: 0\n\t}\n\ttry {\n\t\tawait connection.connectToHost(hostId, playerDetails)\n\t\tstart()\n\t} catch(e) {\n\t\talert(\"could not connect to game ID \" + hostId)\n\t}\n}\n\nfunction showTab(id) {\n\tconst tabContents = document.querySelectorAll(\".tabcontent\")\n\tfor (let tabContent of tabContents) {\n\t\ttabContent.style.display = \"none\"\n\t}\n\n\tconst tabLinks = document.querySelectorAll(\"button.tablinks\")\n\tfor (let tabLink of tabLinks) {\n\t\tif (tabLink.getAttribute(\"tab\") === id) {\n\t\t\ttabLink.classList.add(\"active\")\n\t\t} else {\n\t\t\ttabLink.classList.remove(\"active\")\n\t\t}\n\t}\n\n\tconst selectedTab = document.getElementById(id)\n\tselectedTab.style.display = \"\";\n\n}\n\nwindow.onload = function() {\n\n\tconst userNameInput = document.querySelector(\"#username\")\n\tconst joinGameIdInput = document.querySelector(\"#join-game-id\")\n\tconst joinButton = document.querySelector(\"#join-button\")\n\tconst hostButton = document.querySelector(\"#host-button\")\n\n\tconst tabButtons = document.querySelectorAll(\"button.tablinks\")\n\tfor (let tabButton of tabButtons) {\n\t\ttabButton.addEventListener('click', () => {\n\t\t\tshowTab(tabButton.getAttribute('tab'))\n\t\t})\n\t}\n\tshowTab(\"join\")\n\n\thostButton.addEventListener('click', () => {\n\t\tif (!userNameInput.value) {\n\t\t\talert(\"Please enter a username\")\n\t\t} else {\n\t\t\thostGame(userNameInput.value)\n\t\t}\n\t})\n\n\tjoinButton.addEventListener('click', () => {\n\t\tif (!userNameInput.value) {\n\t\t\talert(\"Please enter a username\")\n\t\t\treturn\n\t\t}\n\n\t\tif (!joinGameIdInput.value) {\n\t\t\talert(\"Please enter a game ID to join\")\n\t\t\treturn\n\t\t}\n\n\t\tjoinGame(userNameInput.value, joinGameIdInput.value)\n\t})\n\n\tconst searchParams = new URLSearchParams(window.location.search);\n\tif (searchParams.has(\"gameId\")) {\n\t\tjoinGameIdInput.value = searchParams.get(\"gameId\")\n\t}\n\n}\n\n","import Peer from 'peerjs';\n\nexport default class Connection {\n    constructor() {\n        this.isHosting = null\n        this.guestConnections = {}\n        this.hostConnection = null\n        this.peerId = generateId()\n        this.hostId = null\n\n        this.peer = new Peer(this.peerId, {\n            host: 'richard-peerjs-server.herokuapp.com',\n            port: 443,\n            path: '/',\n            secure: true\n        });\n\n        this.peer.on('open', id => {\n            this.peerId = id\n            console.log('Connection to server established. ID is: ' + id);\n        });\n\n        this.peer.on('error', err => {\n            console.log('Error1: ', err);\n            console.log('reconnecting');\n            // todo reconnect\n            this.peer.disconnect()\n            this.peer.reconnect()\n        });\n    }\n\n    async beginHosting() {\n        this.isHosting = true\n        this.hostId = this.peerId\n        this.peer.on('connection', async (connection) => {\n            this.guestConnections[connection.peer] = connection\n\n            connection.send(\"hello from host\")\n\n            console.log('Connecting to peer ' + connection.peer);\n            await this.setupConnectionHandlers(connection)\n            //todo handle connection close\n\n            if (this.onGuestConnected) {\n                this.onGuestConnected(connection.peer, connection.metadata)\n            }\n        });\n    }\n\n    async connectToHost(hostId, metadata) {\n        this.isHosting = false\n        console.log(\"connecting to \" + hostId)\n        this.hostConnection = this.peer.connect(hostId, {metadata});\n\n        this.hostConnection.send(\"hello from guest\")\n        this.hostId = this.hostConnection.peer\n        console.log(\"waiting for connection...\")\n        await this.setupConnectionHandlers(this.hostConnection)\n        //todo handle connection close\n        if (this.onConnectedToHost) {\n            this.onConnectedToHost(this.hostConnection.peer, this.hostConnection.metadata)\n        }\n    }\n\n    sendToHost(data) {\n        if (this.isHosting) {\n            throw new Error(\"Cannot send data to host if you are hosting\")\n        }\n        this.hostConnection.send(data);\n    }\n\n    sendToGuest(peerId, data) {\n        if (!this.isHosting) {\n            throw new Error(\"Cannot send data to guest if you are not the host\")\n        }\n        this.guestConnections[peerId].send(data);\n    }\n\n    sendToAllGuests(data) {\n        if (!this.isHosting) {\n            throw new Error(\"Cannot send data to guest if you are not the host\")\n        }\n        for (let peerId of Object.keys(this.guestConnections)) {\n            if (this.guestConnections[peerId].open) {\n                this.guestConnections[peerId].send(data);\n            }\n\n        }\n\n    }\n\n    async ensureConnectionOpen(conn) {\n        return new Promise((resolve, reject) => {\n            if (conn.open) {\n                resolve()\n            }\n            console.log(conn)\n            conn.on('open', function () {\n                console.log(\"Connection open\")\n                resolve()\n            });\n\n            conn.on('error', function (error) {\n                console.error('Connection error', error);\n                reject()\n            });\n\n            this.peer.on('error', err => {\n                console.error(err);\n                reject()\n            });\n        })\n    }\n\n    async setupConnectionHandlers(conn) {\n        await this.ensureConnectionOpen(conn)\n\n        conn.on('data', (data) => {\n            if (this.onMessage) {\n                this.onMessage(data)\n            }\n        });\n\n\n\n        conn.on('close', () => {\n            if (this.onGuestDisconnected) {\n                this.onGuestDisconnected(conn.metadata)\n            }\n        });\n\n        // this.conn.send('Hello from ' + this.peer.id);\n    }\n\n}\n\nfunction generateId(length = 6) {\n    let result = '';\n    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n}\n\n","import deepEquals from \"fast-deep-equal/es6\"\nimport { getWeaponData } from \"./game_data/weapons\"\nimport Phaser from 'phaser'\n\n/*\nplayer: {\n    id: connection.peerId,\n    name: username,\n    x: 100,\n    y: 100,\n    texture: \"tanks\",\n    textureFrame: \"tankBlack\",\n    weapon: \"blaster\",\n    weaponLastFired: 1618407757096,\n    rotation: 0,\n    turretRotation: 0,\n    status: 'connected'\n}\n\nprojectile: {\n    id: projectileData.playerId + \"_\" + Date.now(),\n    playerId: projectileData.playerId,\n    rotation: projectileData.direction,\n    x: projectileData.x,\n    y: projectileData.y,\n    texture: weaponData.texture,\n    velocityX: velocity.x,\n    velocityY: velocity.y,\n}\n\n*/\n\nexport default class GameState {\n    constructor(connection) {\n        this.connection = connection\n        this.setupConnectionHandlers()\n\n        this.state = {\n            map: null,\n            players: {\n\n            },\n            projectiles: {\n\n            },\n            messages: []\n        }\n    }\n\n    setMapName(map) {\n        this.state.map = map\n    }\n\n    getMapName() {\n        return this.state.map\n    }\n\n    sendUpdatedGameState() {\n        if (this.connection.isHosting) {\n            this.connection.sendToAllGuests({\n                type: \"game-state\",\n                data: this.state\n            })\n        } else {\n            console.error(\"cannot sent data to all guests if you are not the host\")\n        }\n    }\n\n    sendPlayerStateToHost(player) {\n        if (!this.connection.isHosting) {\n            this.connection.sendToHost({\n                type: \"player-state\",\n                data: player\n            })\n        } else {\n            console.error(\"cannot sent player data to host if you are the host\")\n        }\n\n    }\n\n    setupConnectionHandlers() {\n        this.connection.onGuestConnected = (peerId, metaData) => {\n            console.log(\"connected \" + peerId)\n            this.state.messages.push(metaData.name + \" has joined the game\")\n            this.addPlayer(metaData)\n        }\n\n        this.connection.onGuestDisconnected = (metaData) => {\n            console.log(\"player left \" + metaData.id)\n            //todo: handle this if the person who left is the host\n            this.state.messages.push(metaData.name + \" has left the game\")\n            this.removePlayer(metaData)\n        }\n\n        this.connection.onMessage = (message) => {\n            switch (message.type) {\n                case \"game-state\":\n                    this.state = message.data\n                    break;\n                case \"player-state\":\n                    this.state.players[message.data.id] = message.data\n                    this.sendUpdatedGameState()\n                    break;\n                case \"shoot-weapon\":\n                    this.addProjectile(message.data)\n                    break;\n            }\n        }\n\n    }\n\n    addPlayer(player) {\n        this.state.players[player.id] = player\n        //Init defaults\n        this.state.players[player.id].status = \"connected\"\n        this.state.players[player.id].weapon = \"blaster\"\n        this.state.players[player.id].weaponLastFired = 0\n        this.sendUpdatedGameState()\n    }\n\n    removePlayer(player) {\n        this.state.players[player.id].status = \"disconnected\"\n        this.sendUpdatedGameState()\n    }\n    \n    removeProjectile(projectileId) {\n        delete this.state.projectiles[projectileId]\n        this.sendUpdatedGameState()\n    }\n\n    getPlayers() {\n        return Object.values(this.state.players)\n    }\n\n    getProjectiles() {\n        return Object.values(this.state.projectiles)\n    }\n\n    updatePlayer(updatedPlayer) {\n        const oldPlayerState = this.state.players[updatedPlayer.id]\n\n        if (!deepEquals(oldPlayerState, updatedPlayer)) {\n            this.state.players[updatedPlayer.id] = { ...this.state.players[updatedPlayer.id], ...updatedPlayer }\n\n            if (this.connection.isHosting) {\n                this.sendUpdatedGameState()\n            } else {\n                this.sendPlayerStateToHost(this.state.players[updatedPlayer.id])\n            }\n        }\n\n    }\n\n    updateProjectilePositions(positions) {\n        for (let p of positions) {\n            if (this.state.projectiles[p.id]) {\n                this.state.projectiles[p.id].x = p.x\n                this.state.projectiles[p.id].y = p.y\n            }\n        }\n        this.sendUpdatedGameState()\n    }\n\n    velocityFromRotation(rotation, speed) {\n        const vec = new Phaser.Math.Vector2()\n        vec.setToPolar(rotation, speed)\n        return vec\n    }\n\n    addProjectile(projectileData) {\n        if (!this.connection.isHosting) {\n            console.error(\"only the host can add projectiles to the game state\")\n            return\n        }\n        const shootingPlayer = this.state.players[projectileData.playerId]\n        const weaponId = shootingPlayer.weapon\n        const weaponData = getWeaponData(weaponId)\n        //check fire rate\n\n        //check max number projectiles\n\n        const velocity = this.velocityFromRotation(projectileData.direction, weaponData.projectile_speed)\n\n        const projectileId = projectileData.playerId + \"_\" + Date.now()\n        this.state.projectiles[projectileId] = {\n            id: projectileData.playerId + \"_\" + Date.now(),\n            playerId: projectileData.playerId,\n            rotation: projectileData.direction + (Math.PI / 2),\n            x: projectileData.x,\n            y: projectileData.y,\n            texture: weaponData.texture,\n            textureFrame: weaponData.textureFrame,\n            scale: weaponData.scale,\n            tint: weaponData.tint,\n            velocityX: velocity.x,\n            velocityY: velocity.y\n        }\n    }\n\n    shootWeapon(projectileData) {\n        if (this.connection.isHosting) {\n            this.addProjectile(projectileData)\n        } else {\n            this.connection.sendToHost({\n                type: \"shoot-weapon\",\n                data: projectileData\n            })\n        }\n    }\n\n    updateProjectile(updatedProjectile) {\n        console.log(updatedProjectile)\n    }\n\n}"],"names":["modulePath","importFunctionName","Function","error","baseURL","URL","location","cleanup","script","revokeObjectURL","src","remove","url","Promise","resolve","reject","absURL","self","moduleMap","moduleBlob","Blob","type","Object","assign","document","createElement","createObjectURL","[object Object]","Error","head","appendChild","p","Phaser","Scene","load","spritesheet","frameWidth","image","atlasXML","scene","start","Physics","Arcade","Sprite","x","y","worldBounds","physics","world","bounds","direction","weaponData","body","reset","setCollideWorldBounds","setActive","setVisible","velocityFromRotation","projectile_speed","this","velocity","time","delta","preUpdate","contains","Group","createMultiple","frameQuantity","max_projectiles","key","texture","active","visible","bounceX","bounceY","classType","ProjectileWeaponBullet","Date","now","lastFire","fire_delay","bullet","getFirstDead","fire","maps","id","name","height","width","tileTexture","tileTextureFrame","objects","textureFrame","playerCollision","bulletCollision","weapons","scale","tint","num_bounces","weaponId","find","m","player","players","projectiles","mapId","cursors","input","keyboard","addKeys","up","Input","Keyboard","KeyCodes","UP","down","DOWN","left","LEFT","right","RIGHT","space","SPACE","shift","SHIFT","up_alt","W","down_alt","S","left_alt","A","right_alt","D","connection","registry","get","gameState","mapData","getMapName","game","playersGroup","add","group","projectilesGroup","objectPlayerCollideGroup","objectProjectileCollideGroup","staticGroup","hostId","peerId","isHost","isHosting","createMap","setupCollisions","text","font","fill","setScrollFactor","renderSprites","on","cursor","angle","Math","Angle","Between","sprite","cameras","main","scrollX","scrollY","turret","setRotation","PI","pointer","shootWeapon","tileSprite","o","setImmovable","refresh","setBounds","log","collider","overlap","onProjectileCollideWithObject","onProjectileCollideWithPlayer","object","projectile","turretEnd","getTopCenter","rotation","playerId","renderPlayers","renderProjectiles","allPlayers","getPlayers","p2","setX","setY","setTexture","turretRotation","label","status","setScale","align","setOrigin","getWeaponData","weapon","ProjectileWeapon","startFollow","allProjectiles","getProjectiles","setTint","setVelocity","velocityX","velocityY","projectileKeys","map","entries","includes","destroy","newPlayerState","frame","updatePlayer","projectilePositions","removeProjectile","push","updateProjectilePositions","speed","isDown","updatePlayerState","updateProjectileStates","guestConnections","hostConnection","length","result","characters","i","charAt","floor","random","generateId","peer","Peer","host","port","path","secure","err","disconnect","reconnect","async","connection2","send","setupConnectionHandlers","onGuestConnected","metadata","connect","onConnectedToHost","data","keys","open","conn","ensureConnectionOpen","onMessage","onGuestDisconnected","state","messages","sendToAllGuests","sendToHost","metaData","addPlayer","removePlayer","message","sendUpdatedGameState","addProjectile","weaponLastFired","projectileId","values","updatedPlayer","oldPlayerState","deepEquals","__assign","sendPlayerStateToHost","positions","vec","Vector2","setToPolar","projectileData","updatedProjectile","window","config","AUTO","parent","default","arcade","gravity","debug","mode","Scale","FIT","Preloader","Game","querySelector","style","display","set","tabContents","querySelectorAll","tabContent","tabLinks","tabLink","getAttribute","classList","getElementById","onload","userNameInput","joinGameIdInput","joinButton","hostButton","tabButtons","tabButton","addEventListener","value","username","beginHosting","setMapName","newUrl","origin","pathname","history","pushState","playerDetails","connectToHost","e","searchParams","URLSearchParams","search","has"],"mappings":"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"}